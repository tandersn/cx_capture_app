#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: CX Capture App  (ALPHA .0001)
# GNU Radio version: 3.10.1.1

from packaging.version import Version as StrictVersion

if __name__ == '__main__':
    import ctypes
    import sys
####################################### added
    import time
######################################
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print("Warning: failed to XInitThreads()")

from PyQt5 import Qt
from gnuradio import eng_notation
from gnuradio import qtgui
from gnuradio.filter import firdes
import sip
from gnuradio import analog
from gnuradio import blocks
import pmt
from gnuradio import gr
from gnuradio.fft import window
import sys
import signal
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio.qtgui import Range, RangeWidget
from PyQt5 import QtCore



from gnuradio import qtgui

class cx_capture_app(gr.top_block, Qt.QWidget):

    def __init__(self):
        gr.top_block.__init__(self, "CX Capture App  (ALPHA .0001)", catch_exceptions=True)
        Qt.QWidget.__init__(self)
        self.setWindowTitle("CX Capture App  (ALPHA .0001)")
        qtgui.util.check_set_qss()
        try:
            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
        except:
            pass
        self.top_scroll_layout = Qt.QVBoxLayout()
        self.setLayout(self.top_scroll_layout)
        self.top_scroll = Qt.QScrollArea()
        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
        self.top_scroll_layout.addWidget(self.top_scroll)
        self.top_scroll.setWidgetResizable(True)
        self.top_widget = Qt.QWidget()
        self.top_scroll.setWidget(self.top_widget)
        self.top_layout = Qt.QVBoxLayout(self.top_widget)
        self.top_grid_layout = Qt.QGridLayout()
        self.top_layout.addLayout(self.top_grid_layout)

        self.settings = Qt.QSettings("GNU Radio", "cx_capture_app")

        try:
            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
                self.restoreGeometry(self.settings.value("geometry").toByteArray())
            else:
                self.restoreGeometry(self.settings.value("geometry"))
        except:
            pass
###***************************** added after *********************************
        #READ IN CX CARD PARAMETERS
        #syssyfsfile = open(r"/sys/module/cxadc/parameters/level","r")
        syssyfsfile = open(r"/sys/class/cxadc/cxadc0/device/parameters/level","r")
        self.cxlevelstart = syssyfsfile.read()
        syssyfsfile.close()
        #syssyfsfile = open(r"/sys/module/cxadc/parameters/sixdb","r")
        syssyfsfile = open(r"/sys/class/cxadc/cxadc0/device/parameters/sixdb","r")
        self.cxsixdbstart = int(syssyfsfile.read())
        syssyfsfile.close()
        #syssyfsfile = open(r"/sys/module/cxadc/parameters/center_offset","r")
        syssyfsfile = open(r"/sys/class/cxadc/cxadc0/device/parameters/center_offset","r")
        self.cxcenter_offsetstart = syssyfsfile.read()
        syssyfsfile.close()
###***************************** added after *********************************

        ##################################################
        # Variables
        ##################################################
        self.variable_qtgui_toggle_button_0 = variable_qtgui_toggle_button_0 = 0
        self.variable_qtgui_range_1 = variable_qtgui_range_1 = 8
        self.variable_qtgui_range_0 = variable_qtgui_range_0 = 23
        if  len(sys.argv) > 1:
            self.variable_qtgui_entry_0 = variable_qtgui_entry_0 = sys.argv[1] + "_" + str(int(time.time())) + ".u8"
        else:
            self.variable_qtgui_entry_0 = variable_qtgui_entry_0 = '/dev/null'

###***************************** modded after *********************************
#	set card values read in earlier
        self.variable_qtgui_check_box_0 = variable_qtgui_check_box_0 = self.cxsixdbstart
###***************************** modded after ************** ^^^^^^^^^^^^^^^^ *
        self.samp_rate = samp_rate = 40e6
        ##################################################
        # Blocks
        ##################################################
        if bool == bool:
        	self._variable_qtgui_toggle_button_0_choices = {'Pressed': bool(1), 'Released': bool(0)}
        elif bool == str:
        	self._variable_qtgui_toggle_button_0_choices = {'Pressed': "1".replace("'",""), 'Released': "0".replace("'","")}
        else:
        	self._variable_qtgui_toggle_button_0_choices = {'Pressed': 1, 'Released': 0}

#        _variable_qtgui_toggle_button_0_toggle_button = qtgui.ToggleButton(self.set_variable_qtgui_toggle_button_0, 'Capture ON/OFF', self._variable_qtgui_toggle_button_0_choices, False,"red","gray",4, 50, 1, 1,self,"'value'".replace("'",""))
        _variable_qtgui_toggle_button_0_toggle_button = qtgui.ToggleButton(self.set_variable_qtgui_toggle_button_0, 'Capture ON/OFF', self._variable_qtgui_toggle_button_0_choices, False, 'value')
        _variable_qtgui_toggle_button_0_toggle_button.setColors("default", "default", "red", "default")

        self.variable_qtgui_toggle_button_0 = _variable_qtgui_toggle_button_0_toggle_button

        self.top_grid_layout.addWidget(_variable_qtgui_toggle_button_0_toggle_button, 9, 0, 1, 1)
        for r in range(9, 10):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(0, 1):
            self.top_grid_layout.setColumnStretch(c, 1)
        self._variable_qtgui_entry_0_tool_bar = Qt.QToolBar(self)
        self._variable_qtgui_entry_0_tool_bar.addWidget(Qt.QLabel("Capture File Path" + ": "))
        self._variable_qtgui_entry_0_line_edit = Qt.QLineEdit(str(self.variable_qtgui_entry_0))
        self._variable_qtgui_entry_0_tool_bar.addWidget(self._variable_qtgui_entry_0_line_edit)
        self._variable_qtgui_entry_0_line_edit.returnPressed.connect(
            lambda: self.set_variable_qtgui_entry_0(str(str(self._variable_qtgui_entry_0_line_edit.text()))))
        self.top_grid_layout.addWidget(self._variable_qtgui_entry_0_tool_bar, 0, 0, 1, 3)
        for r in range(0, 1):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(0, 3):
            self.top_grid_layout.setColumnStretch(c, 1)
###***************************** modded after *********************************
#	set card values read in earlier
        self._variable_qtgui_range_1_range = Range(0, 48, 1, self.cxcenter_offsetstart , 200)
###***************************** modded after ************** ^^^^^^^^^^^^^^^^ *
        self._variable_qtgui_range_1_win = RangeWidget(self._variable_qtgui_range_1_range, self.set_variable_qtgui_range_1, "CENTER OFFSET:", "counter_slider", int, QtCore.Qt.Horizontal)
        self.top_grid_layout.addWidget(self._variable_qtgui_range_1_win, 2, 0, 1, 3)
        for r in range(2, 3):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(0, 3):
            self.top_grid_layout.setColumnStretch(c, 1)
###***************************** modded after *********************************
#	set card values read in earlier
        self._variable_qtgui_range_0_range = Range(0, 31, 1, self.cxlevelstart, 200)
###***************************** modded after ************** ^^^^^^^^^^^^^^^^ *
        self._variable_qtgui_range_0_win = RangeWidget(self._variable_qtgui_range_0_range, self.set_variable_qtgui_range_0, "LEVEL:", "counter_slider", int, QtCore.Qt.Horizontal)
        self.top_grid_layout.addWidget(self._variable_qtgui_range_0_win, 1, 0, 1, 3)
        for r in range(1, 2):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(0, 3):
            self.top_grid_layout.setColumnStretch(c, 1)
        _variable_qtgui_check_box_0_check_box = Qt.QCheckBox("+six DB")
        self._variable_qtgui_check_box_0_choices = {True: True, False: False}
        self._variable_qtgui_check_box_0_choices_inv = dict((v,k) for k,v in self._variable_qtgui_check_box_0_choices.items())
        self._variable_qtgui_check_box_0_callback = lambda i: Qt.QMetaObject.invokeMethod(_variable_qtgui_check_box_0_check_box, "setChecked", Qt.Q_ARG("bool", self._variable_qtgui_check_box_0_choices_inv[i]))
        self._variable_qtgui_check_box_0_callback(self.variable_qtgui_check_box_0)
        _variable_qtgui_check_box_0_check_box.stateChanged.connect(lambda i: self.set_variable_qtgui_check_box_0(self._variable_qtgui_check_box_0_choices[bool(i)]))
        self.top_grid_layout.addWidget(_variable_qtgui_check_box_0_check_box, 9, 2, 1, 1)
        for r in range(9, 10):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(2, 3):
            self.top_grid_layout.setColumnStretch(c, 1)
        self.qtgui_time_sink_x_1 = qtgui.time_sink_f(
            512, #size
            samp_rate, #samp_rate
            "", #name
            2, #number of inputs
            None # parent
        )
        self.qtgui_time_sink_x_1.set_update_time(0.25)
        self.qtgui_time_sink_x_1.set_y_axis(-127, 127)

        self.qtgui_time_sink_x_1.set_y_label('', "")

        self.qtgui_time_sink_x_1.enable_tags(False)
        self.qtgui_time_sink_x_1.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "packet_len")
        self.qtgui_time_sink_x_1.enable_autoscale(False)
        self.qtgui_time_sink_x_1.enable_grid(True)
        self.qtgui_time_sink_x_1.enable_axis_labels(True)
        self.qtgui_time_sink_x_1.enable_control_panel(False)
        self.qtgui_time_sink_x_1.enable_stem_plot(False)

        self.qtgui_time_sink_x_1.disable_legend()

        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [2, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['black', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 2, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(2):
            if len(labels[i]) == 0:
                self.qtgui_time_sink_x_1.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_time_sink_x_1.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_1.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_1.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_1.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_1.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_1.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_1_win = sip.wrapinstance(self.qtgui_time_sink_x_1.qwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_1_win, 3, 0, 5, 3)
        for r in range(3, 8):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(0, 3):
            self.top_grid_layout.setColumnStretch(c, 1)
        self.qtgui_ledindicator_0 = self._qtgui_ledindicator_0_win = qtgui.GrLEDIndicator("Capturing...", "red", "black", variable_qtgui_toggle_button_0, 40, 1, 1, 1, self)
        self.qtgui_ledindicator_0 = self._qtgui_ledindicator_0_win
        self.top_grid_layout.addWidget(self._qtgui_ledindicator_0_win, 9, 1, 1, 1)
        for r in range(9, 10):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(1, 2):
            self.top_grid_layout.setColumnStretch(c, 1)
        self.blocks_uchar_to_float_0 = blocks.uchar_to_float()
        self.blocks_throttle_0 = blocks.throttle(gr.sizeof_char*1, samp_rate,True)
        self.blocks_sub_xx_0 = blocks.sub_ff(1)
        self.blocks_selector_0 = blocks.selector(gr.sizeof_char*1,0,variable_qtgui_toggle_button_0)
        self.blocks_selector_0.set_enabled(True)
        self.blocks_null_sink_0 = blocks.null_sink(gr.sizeof_char*1)
        self.blocks_file_source_0_0_0 = blocks.file_source(gr.sizeof_char*1, '/dev/cxadc0', False, 0, 0)
        self.blocks_file_source_0_0_0.set_begin_tag(pmt.PMT_NIL)
        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_char*1, variable_qtgui_entry_0, True)
        self.blocks_file_sink_0.set_unbuffered(False)
        self.analog_const_source_x_0_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 127)
        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 0)


        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_const_source_x_0, 0), (self.qtgui_time_sink_x_1, 1))
        self.connect((self.analog_const_source_x_0_0, 0), (self.blocks_sub_xx_0, 1))
        self.connect((self.blocks_file_source_0_0_0, 0), (self.blocks_throttle_0, 0))
        self.connect((self.blocks_selector_0, 1), (self.blocks_file_sink_0, 0))
        self.connect((self.blocks_selector_0, 0), (self.blocks_null_sink_0, 0))
        self.connect((self.blocks_sub_xx_0, 0), (self.qtgui_time_sink_x_1, 0))
        self.connect((self.blocks_throttle_0, 0), (self.blocks_selector_0, 0))
        self.connect((self.blocks_throttle_0, 0), (self.blocks_uchar_to_float_0, 0))
        self.connect((self.blocks_uchar_to_float_0, 0), (self.blocks_sub_xx_0, 0))


    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "cx_capture_app")
        self.settings.setValue("geometry", self.saveGeometry())
        self.stop()
        self.wait()

        event.accept()

    def get_variable_qtgui_toggle_button_0(self):
        return self.variable_qtgui_toggle_button_0

    def set_variable_qtgui_toggle_button_0(self, variable_qtgui_toggle_button_0):
###***************************** added after *********************************
#	update the text filename in case return not pressed
        self.set_variable_qtgui_entry_0(str(str(self._variable_qtgui_entry_0_line_edit.text())))
###***************************** added after *********************************
        self.variable_qtgui_toggle_button_0 = variable_qtgui_toggle_button_0
        self.blocks_selector_0.set_output_index(self.variable_qtgui_toggle_button_0)
        self.qtgui_ledindicator_0.setState(self.variable_qtgui_toggle_button_0)

    def get_variable_qtgui_range_1(self):
        return self.variable_qtgui_range_1

    def set_variable_qtgui_range_1(self, variable_qtgui_range_1):
###***************************** added after *********************************
        #syssyfsfile = open(r"/sys/module/cxadc/parameters/center_offset","w")
        syssyfsfile = open(r"/sys/class/cxadc/cxadc0/device/parameters/center_offset","w")
        syssyfsfile.write(str(variable_qtgui_range_1))
        syssyfsfile.close()
###***************************** added after *********************************
        self.variable_qtgui_range_1 = variable_qtgui_range_1

    def get_variable_qtgui_range_0(self):
        return self.variable_qtgui_range_0

    def set_variable_qtgui_range_0(self, variable_qtgui_range_0):
###***************************** added after *********************************
        #syssyfsfile = open(r"/sys/module/cxadc/parameters/level","w")
        syssyfsfile = open(r"/sys/class/cxadc/cxadc0/device/parameters/level","w")
        syssyfsfile.write(str(variable_qtgui_range_0))
        syssyfsfile.close()
###***************************** added after *********************************
        self.variable_qtgui_range_0 = variable_qtgui_range_0

    def get_variable_qtgui_entry_0(self):
        return self.variable_qtgui_entry_0

    def set_variable_qtgui_entry_0(self, variable_qtgui_entry_0):
        self.variable_qtgui_entry_0 = variable_qtgui_entry_0
        Qt.QMetaObject.invokeMethod(self._variable_qtgui_entry_0_line_edit, "setText", Qt.Q_ARG("QString", str(self.variable_qtgui_entry_0)))
        self.blocks_file_sink_0.open(self.variable_qtgui_entry_0)

    def get_variable_qtgui_check_box_0(self):
        return self.variable_qtgui_check_box_0

    def set_variable_qtgui_check_box_0(self, variable_qtgui_check_box_0):
###***************************** added after *********************************
        #syssyfsfile = open(r"/sys/module/cxadc/parameters/sixdb","w")
        syssyfsfile = open(r"/sys/class/cxadc/cxadc0/device/parameters/sixdb","w")
        if self.variable_qtgui_check_box_0 == True:   
           syssyfsfile.write(str(0))
        else:
           syssyfsfile.write(str(1))
        syssyfsfile.close()
###***************************** added after *********************************
        self.variable_qtgui_check_box_0 = variable_qtgui_check_box_0
        self._variable_qtgui_check_box_0_callback(self.variable_qtgui_check_box_0)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.blocks_throttle_0.set_sample_rate(self.samp_rate)
        self.qtgui_time_sink_x_1.set_samp_rate(self.samp_rate)




def main(top_block_cls=cx_capture_app, options=None):

    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
        style = gr.prefs().get_string('qtgui', 'style', 'raster')
        Qt.QApplication.setGraphicsSystem(style)
    qapp = Qt.QApplication(sys.argv)

    tb = top_block_cls()

    tb.start()

    tb.show()

    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()

        Qt.QApplication.quit()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    timer = Qt.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    qapp.exec_()

if __name__ == '__main__':
    main()
